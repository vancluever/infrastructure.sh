#!/usr/bin/env bash

# The path to the Terraform version varaible.
version_tf_file="terraform/version.tf"

# message prints text with a color, redirected to stderr in the event of
# warning or error messages.
message() {
  declare -A __colors=(
    ["error"]="31"   # red
    ["warning"]="33" # yellow
    ["begin"]="32"   # green
    ["ok"]="32"      # green
    ["info"]="1"     # bold
    ["reset"]="0"    # here just to note reset code
  )
  local __type="$1"
  local __message="$2"
  if [ -z "${__colors[$__type]}" ]; then
    __type="info"
  fi
  if [[ ! "${__type}" =~ ^(warning|error)$ ]]; then
    echo -e "\e[${__colors[$__type]}m${__message}\e[0m" 1>&2
  else
    echo -e "\e[${__colors[$__type]}m${__message}\e[0m"
  fi
}

# gets the last ten releases.
versions=($(git tag --sort "-v:refname" | egrep '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 10))

if [ -z "${versions[*]}" ]; then
  message error "No non-prerelease versions available at this time. Please release a version first"
  message error "and ensure the build has a matching vMAJOR.MINOR.PATCH tag."
  exit 1
fi

message info "Select a build version to release with:"
for (( n=0; n<${#versions[@]}; n+=1 )); do
  message info "${n}: ${versions[$n]}"
done

read -r -p "$(message info "Enter a number (Default 0, CTRL-C Cancels):")" selection_number

if [ -z "${selection_number}" ]; then
  selection_number="0"
fi

if ! [ "${selection_number}" -ge "0" ] 2>/dev/null || ! [ "${selection_number}" -lt "${#versions[@]}" ] 2>/dev/null; then
  message error "Invalid selection. Please enter a valid selection from 0-$((${#versions[@]}-1))."
  exit 1
fi

version="${versions[$selection_number]}"

message begin "==> Writing out ${version_tf_file} <=="

cat > "${version_tf_file}" <<EOS
// Automatically generated by release automation - DO NOT EDIT
// Job creation date: $(date)

// The build version.
variable "build_version" {
  default = "${version/v}"
}
EOS

message begin "==> Fetching Notes and Computing Build Number <=="
git fetch origin refs/notes/*:refs/notes/*
last_note=$(git show --format= --name-only refs/notes/infrastructure_build_number 2>/dev/null)
last_build_number=$(git notes --ref=infrastructure_build_number show "${last_note}" 2>/dev/null || echo "0")
if ! [ "${last_build_number}" -eq "${last_build_number}" ] 2>/dev/null; then
  message error "Build number note in infrastructure_build_number is not a number. Please check"
  message error "git notes --ref=infrastructure_build_number list"
  message error "and"
  message error "git notes --ref=infrastructure_build_number LAST_COMMIT"
  message error "To view the structure of the last note and overwrite it."
  exit 1
fi
current_build_number=$((last_build_number + 1))
infrastructure_tag="infrastructure#${current_build_number}-${version}"

set -e

message begin "==> Committing, Tagging and Writing Note for ${infrastructure_tag} <=="
git add "${version_tf_file}"
git commit -m "Infrastructure release #${current_build_number}-${version}"
git tag "${infrastructure_tag}"
git notes --ref=infrastructure_build_number add -m "${current_build_number}"

message begin "==> Pushing all Changes <=="
git push origin master
git push origin --tags
git push origin refs/notes/*

message ok "\nInfrastructure release pushed. Check your CI system for the build status,"
message ok "with the tag ${infrastructure_tag}."
